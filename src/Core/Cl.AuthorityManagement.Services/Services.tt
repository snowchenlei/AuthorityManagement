<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
	string solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)");
	string modelFile= Path.Combine(solutionsPath, @"Cl.AuthorityManagement.Data/bin/Debug/Cl.AuthorityManagement.Data.dll");
	byte[] fileData= File.ReadAllBytes(modelFile);
	Assembly assembly = Assembly.Load(fileData);
    Type type = assembly.GetType("Cl.AuthorityManagement.Data.AuthorityManagementContext");
    PropertyInfo[] modelTypes = type.GetProperties().Where(p => p.GetMethod.IsVirtual).ToArray();
#>

using Cl.AuthorityManagement.Entity;
using Cl.AuthorityManagement.IServices;
using Cl.AuthorityManagement.IRepository;

namespace Cl.AuthorityManagement.Services
{
<#foreach(var entity in modelTypes)
{#>
	public partial class <#=entity.Name #>Services: BaseServices<<#=entity.Name #>>, I<#=entity.Name #>Services
    {
		public <#=entity.Name #>Services(IBaseRepository<<#=entity.Name #>> baseRepository) : base(baseRepository)
        {
        }
	}
<#} #>
}